import React, { FC, useEffect, useState } from 'react'
import Head from 'next/head'
import Main from '../layout/main.layout'
import PageWithLayout from '../layout/page.layout'
import styles from '../styles/Home.module.scss'
import Image from 'next/image'
import JobCard from '../components/card/jobcard'
import { getAllJobQuery, getJobFilterSearch, getJobSearch, getsAllCateg } from '../util/job/job.query'
import { useQuery, useLazyQuery } from '@apollo/client'
import { JobQuery, Filter } from '../interface/jobs.interface.query'
import { jobType, workType } from '../util/values/filter'
import { OrderDate } from '../util/values/filter'



const Home: FC = () => {

  const [ searchJob, { data: searchData } ] = useLazyQuery(getJobSearch)
  const [ search, setSearch ] = useState("");
  const [ dateFilter, setDateFilter ] = useState("desc");
  const [ datebool, setDateBool ] = useState(false)


  const [ pages, setPages ] = useState(0)

  const { loading, data, error } = useQuery(getAllJobQuery, {
    variables: {
      limit: 10,
      offset: pages * 10,
      order: dateFilter
    }
  })

  const { loading: categLoading, data: categData } = useQuery(getsAllCateg)


  const [ filter, setFilter ] = useState<Filter>({
    jobType: [],
    workType: [],
    category: ""
  })

  const [ filterJob, { data: filterData, client } ] = useLazyQuery(getJobFilterSearch, {
    variables: {
      category: filter.category,
      jobType: filter.jobType,
      workType: filter.jobType,
      limit: 10,
      offset: pages * 10
    }
  })


  useEffect(() => {
    filterJob()
    client.resetStore()
  }, [ client, filterJob ])

  const getSearchFN = (e: any) => {
    searchJob({
      variables: {
        search
      }
    })
    setSearch(e.target.value)
  }


  const getJobType = (e: any) => {
    let listJobType = [ ...filter.jobType, e.target.value ]
    if (filter.jobType.includes(e.target.value)) {
      listJobType = filter.jobType.filter(job => job !== e.target.value)
    }
    setFilter({ ...filter, jobType: listJobType })
  }


  const getWorkType = (e: any) => {
    let listWorkType = [ ...filter.workType, e.target.value ]
    if (filter.workType.includes(e.target.value)) {
      listWorkType = filter.workType.filter(work => work !== e.target.value);
      setFilter({ ...filter, workType: [] })
    }

    setFilter({ ...filter, workType: listWorkType })
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Careers - Global Headstart Specialist Inc.</title>
        <meta name="description" content="Generated by GHS - Job Post" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.searchDiv}>
        <h2>Land your first job here</h2>
        <div className={styles.text}>
          <input type="text" value={search} onChange={getSearchFN} placeholder='Find a Job' />
        </div>
      </div>
      <div className={styles.con}>
        <div className={styles.sidebar}>
          <div className={styles.option}>
            <div className={styles.optionContainer}>
              <h2>Job Type</h2>
              {jobType.map((name) => (
                <div className={styles.holder} key={name}>
                  <input type="checkbox" value={name} onChange={getJobType} />
                  <label>{name}</label>
                </div>
              ))}
            </div>
            <div className={styles.optionContainer}>
              <h2>Work Type</h2>
              {workType.map((name) => (
                <div className={styles.holder} key={name}>
                  <input type="checkbox"
                    onChange={getWorkType} value={name} />
                  <label>{name}</label>
                </div>
              ))}
            </div>
            <div className={styles.optionContainer}>
              <h2>Category</h2>

              {categLoading ? null : categData.getAllCategories.map(({ category }: any) => (
                <div className={styles.holder} key={category}>
                  <input type="checkbox" onChange={(e) => {
                    setFilter({ ...filter, category: e.target.value })
                    if (filter.category === e.target.value) {
                      setFilter({ ...filter, category: "" })
                    }
                  }} value={category} />
                  <label>{category}</label>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className={styles.cardContainer}>
          <div className={styles.filterCon}>
            <div className={styles.filterDate}>
              <span>Sort by</span>
              <button onClick={() => setDateBool(() => !datebool)} className={styles.dateFilBtn}>{dateFilter === "desc" ? "Newest" : "Oldest"} </button>
              {datebool ? <div className={styles.btnDateFil}>
                {OrderDate.map(({ name, value }) => (
                  <button onClick={(e) => {
                    setDateFilter(e.currentTarget.value)
                    setDateBool(false)
                  }} key={name} value={value}>{name}</button>
                ))}
              </div> : null}
            </div>
          </div>
          <div className={styles.filb}>
            {filter.jobType.length > 0 ?
              < div className={styles.filterBox}>
                {filter.jobType.map((name) => (
                  <div className={styles.filterBoxCon} key={name}>
                    <span>{name}</span>
                    <button onClick={(e) => {
                      e.preventDefault()
                      let jobList = [ ...filter.jobType, name ]
                      if (jobList.includes(name)) {
                        jobList = jobList.filter(names => names !== name)
                      }
                      setFilter({ ...filter, jobType: jobList })
                    }}>
                      <Image src="/icon/x.svg" alt="" height={15} width={15} />
                    </button>
                  </div>
                ))}

              </div> : null}

            {
              filter.workType.length > 0 ?
                <div className={styles.filterBox}>
                  {filter.workType.map((name) => (
                    <div className={styles.filterBoxCon} key={name}>
                      <span>{name}</span>
                      <button onClick={(e) => {
                        e.preventDefault()
                        let jobList = [ ...filter.workType, name ]
                        if (jobList.includes(name)) {
                          jobList = jobList.filter(names => names !== name)
                        }
                        setFilter({ ...filter, workType: jobList })
                      }}>
                        <Image src="/icon/x.svg" alt="" height={15} width={15} />
                      </button>
                    </div>
                  ))}

                </div> : null
            }
            {filter.category !== "" ? <div className={styles.filterBox}>
              <div className={styles.filterBoxCon}>
                <span>{filter.category}</span>
                <button onClick={() => setFilter({ ...filter, category: "" })}>
                  <Image src="/icon/x.svg" alt="" height={15} width={15} />
                </button>
              </div>
            </div> : null}
          </div>
          {
            filter.category !== "" || filter.jobType.length > 0 || filter.workType.length > 0 ?
              filterData?.getSpecificJob.map(({ jobPost }: any) => (
                jobPost.map(({ jobPostID, title, details, description }: any) => (
                  <JobCard key={jobPostID} id={jobPostID} title={title} details={details} description={description} />
                ))
              ))
              :
              search ? searchData?.getJobPostSearch.map(({ jobPostID, title, details, description }: any) => (
                <JobCard key={description} id={jobPostID} title={title} details={details} description={description} />
              )) :
                loading ? "Loading" : data.getAllJobPost.map(({ jobPostID, title, description, details }: JobQuery) => (
                  <JobCard key={title} id={jobPostID} title={title} details={details} description={description} />
                ))
          }

          {
            filterData?.getSpecificJob.length === 0 ? <div className={styles.NoItem}>No item Retrieved </div> : null
          }
          {filter.category !== "" || filter.jobType.length > 0 || filter.workType.length > 0 ?
            <div className={styles.pages}>
              <button disabled={!pages} onClick={() => setPages(() => pages - 1)}>
                <Image src="/icon/arrow-left-line.svg" alt="" height={20} width={20} />
              </button>
              <span>{pages + 1}</span>
              <button disabled={loading ? true : data.getAllJobPost.length < 10 || data.getAllJobPost === 0} onClick={() => setPages(() => pages + 1)}>
                <Image src="/icon/arrow-right-line.svg" alt="" height={20} width={20} />
              </button>
            </div>
            :
            <div className={styles.pages}>
              <button disabled={!pages} onClick={() => setPages(() => pages - 1)}>
                <Image src="/icon/arrow-left-line.svg" alt="" height={20} width={20} />
              </button>
              <span>{pages + 1}</span>
              <button disabled={loading ? true : data.getAllJobPost.length < 10 || data.getAllJobPost.length === 0} onClick={() => setPages(() => pages + 1)}>
                <Image src="/icon/arrow-right-line.svg" alt="" height={20} width={20} />
              </button>
            </div>}
        </div>
      </div>
    </div >
  )
}


(Home as PageWithLayout).layout = Main
export default Home